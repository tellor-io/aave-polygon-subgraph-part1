// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value!.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value!.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIAccrueInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIAccrueInterest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIAccrueInterest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIAccrueInterest", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIAccrueInterest | null {
    return changetype<CErc20Delegator_hDAIAccrueInterest | null>(
      store.get("CErc20Delegator_hDAIAccrueInterest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value!.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value!.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }

  get borrowIndex(): BigInt {
    let value = this.get("borrowIndex");
    return value!.toBigInt();
  }

  set borrowIndex(value: BigInt) {
    this.set("borrowIndex", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIApproval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIApproval", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIApproval | null {
    return changetype<CErc20Delegator_hDAIApproval | null>(
      store.get("CErc20Delegator_hDAIApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value!.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIBorrow | null {
    return changetype<CErc20Delegator_hDAIBorrow | null>(
      store.get("CErc20Delegator_hDAIBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value!.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIFailure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIFailure entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIFailure must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIFailure", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIFailure | null {
    return changetype<CErc20Delegator_hDAIFailure | null>(
      store.get("CErc20Delegator_hDAIFailure", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get error(): BigInt {
    let value = this.get("error");
    return value!.toBigInt();
  }

  set error(value: BigInt) {
    this.set("error", Value.fromBigInt(value));
  }

  get info(): BigInt {
    let value = this.get("info");
    return value!.toBigInt();
  }

  set info(value: BigInt) {
    this.set("info", Value.fromBigInt(value));
  }

  get detail(): BigInt {
    let value = this.get("detail");
    return value!.toBigInt();
  }

  set detail(value: BigInt) {
    this.set("detail", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAILiquidateBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAILiquidateBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAILiquidateBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAILiquidateBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAILiquidateBorrow | null {
    return changetype<CErc20Delegator_hDAILiquidateBorrow | null>(
      store.get("CErc20Delegator_hDAILiquidateBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value!.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get cTokenCollateral(): Bytes {
    let value = this.get("cTokenCollateral");
    return value!.toBytes();
  }

  set cTokenCollateral(value: Bytes) {
    this.set("cTokenCollateral", Value.fromBytes(value));
  }

  get seizeTokens(): BigInt {
    let value = this.get("seizeTokens");
    return value!.toBigInt();
  }

  set seizeTokens(value: BigInt) {
    this.set("seizeTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIMint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIMint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIMint", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIMint | null {
    return changetype<CErc20Delegator_hDAIMint | null>(
      store.get("CErc20Delegator_hDAIMint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value!.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get mintTokens(): BigInt {
    let value = this.get("mintTokens");
    return value!.toBigInt();
  }

  set mintTokens(value: BigInt) {
    this.set("mintTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAINewAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAINewAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAINewAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAINewAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAINewAdmin | null {
    return changetype<CErc20Delegator_hDAINewAdmin | null>(
      store.get("CErc20Delegator_hDAINewAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value!.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value!.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hDAINewComptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAINewComptroller entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAINewComptroller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAINewComptroller", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAINewComptroller | null {
    return changetype<CErc20Delegator_hDAINewComptroller | null>(
      store.get("CErc20Delegator_hDAINewComptroller", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldComptroller(): Bytes {
    let value = this.get("oldComptroller");
    return value!.toBytes();
  }

  set oldComptroller(value: Bytes) {
    this.set("oldComptroller", Value.fromBytes(value));
  }

  get newComptroller(): Bytes {
    let value = this.get("newComptroller");
    return value!.toBytes();
  }

  set newComptroller(value: Bytes) {
    this.set("newComptroller", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hDAINewImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAINewImplementation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAINewImplementation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAINewImplementation", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAINewImplementation | null {
    return changetype<CErc20Delegator_hDAINewImplementation | null>(
      store.get("CErc20Delegator_hDAINewImplementation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldImplementation(): Bytes {
    let value = this.get("oldImplementation");
    return value!.toBytes();
  }

  set oldImplementation(value: Bytes) {
    this.set("oldImplementation", Value.fromBytes(value));
  }

  get newImplementation(): Bytes {
    let value = this.get("newImplementation");
    return value!.toBytes();
  }

  set newImplementation(value: Bytes) {
    this.set("newImplementation", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hDAINewMarketInterestRateModel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAINewMarketInterestRateModel entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAINewMarketInterestRateModel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "CErc20Delegator_hDAINewMarketInterestRateModel",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): CErc20Delegator_hDAINewMarketInterestRateModel | null {
    return changetype<CErc20Delegator_hDAINewMarketInterestRateModel | null>(
      store.get("CErc20Delegator_hDAINewMarketInterestRateModel", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldInterestRateModel(): Bytes {
    let value = this.get("oldInterestRateModel");
    return value!.toBytes();
  }

  set oldInterestRateModel(value: Bytes) {
    this.set("oldInterestRateModel", Value.fromBytes(value));
  }

  get newInterestRateModel(): Bytes {
    let value = this.get("newInterestRateModel");
    return value!.toBytes();
  }

  set newInterestRateModel(value: Bytes) {
    this.set("newInterestRateModel", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hDAINewPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAINewPendingAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAINewPendingAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAINewPendingAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAINewPendingAdmin | null {
    return changetype<CErc20Delegator_hDAINewPendingAdmin | null>(
      store.get("CErc20Delegator_hDAINewPendingAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingAdmin(): Bytes {
    let value = this.get("oldPendingAdmin");
    return value!.toBytes();
  }

  set oldPendingAdmin(value: Bytes) {
    this.set("oldPendingAdmin", Value.fromBytes(value));
  }

  get newPendingAdmin(): Bytes {
    let value = this.get("newPendingAdmin");
    return value!.toBytes();
  }

  set newPendingAdmin(value: Bytes) {
    this.set("newPendingAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hDAINewReserveFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAINewReserveFactor entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAINewReserveFactor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAINewReserveFactor", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAINewReserveFactor | null {
    return changetype<CErc20Delegator_hDAINewReserveFactor | null>(
      store.get("CErc20Delegator_hDAINewReserveFactor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldReserveFactorMantissa(): BigInt {
    let value = this.get("oldReserveFactorMantissa");
    return value!.toBigInt();
  }

  set oldReserveFactorMantissa(value: BigInt) {
    this.set("oldReserveFactorMantissa", Value.fromBigInt(value));
  }

  get newReserveFactorMantissa(): BigInt {
    let value = this.get("newReserveFactorMantissa");
    return value!.toBigInt();
  }

  set newReserveFactorMantissa(value: BigInt) {
    this.set("newReserveFactorMantissa", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIRedeem entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIRedeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIRedeem", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIRedeem | null {
    return changetype<CErc20Delegator_hDAIRedeem | null>(
      store.get("CErc20Delegator_hDAIRedeem", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value!.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value!.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get redeemTokens(): BigInt {
    let value = this.get("redeemTokens");
    return value!.toBigInt();
  }

  set redeemTokens(value: BigInt) {
    this.set("redeemTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIRepayBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIRepayBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIRepayBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIRepayBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIRepayBorrow | null {
    return changetype<CErc20Delegator_hDAIRepayBorrow | null>(
      store.get("CErc20Delegator_hDAIRepayBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value!.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIReservesAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIReservesAdded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIReservesAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIReservesAdded", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIReservesAdded | null {
    return changetype<CErc20Delegator_hDAIReservesAdded | null>(
      store.get("CErc20Delegator_hDAIReservesAdded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefactor(): Bytes {
    let value = this.get("benefactor");
    return value!.toBytes();
  }

  set benefactor(value: Bytes) {
    this.set("benefactor", Value.fromBytes(value));
  }

  get addAmount(): BigInt {
    let value = this.get("addAmount");
    return value!.toBigInt();
  }

  set addAmount(value: BigInt) {
    this.set("addAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAIReservesReduced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAIReservesReduced entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAIReservesReduced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAIReservesReduced", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAIReservesReduced | null {
    return changetype<CErc20Delegator_hDAIReservesReduced | null>(
      store.get("CErc20Delegator_hDAIReservesReduced", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get reduceAmount(): BigInt {
    let value = this.get("reduceAmount");
    return value!.toBigInt();
  }

  set reduceAmount(value: BigInt) {
    this.set("reduceAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hDAITransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hDAITransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hDAITransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hDAITransfer", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hDAITransfer | null {
    return changetype<CErc20Delegator_hDAITransfer | null>(
      store.get("CErc20Delegator_hDAITransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCAccrueInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCAccrueInterest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCAccrueInterest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCAccrueInterest", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCAccrueInterest | null {
    return changetype<CErc20Delegator_hUSDCAccrueInterest | null>(
      store.get("CErc20Delegator_hUSDCAccrueInterest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value!.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value!.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }

  get borrowIndex(): BigInt {
    let value = this.get("borrowIndex");
    return value!.toBigInt();
  }

  set borrowIndex(value: BigInt) {
    this.set("borrowIndex", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCApproval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCApproval", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCApproval | null {
    return changetype<CErc20Delegator_hUSDCApproval | null>(
      store.get("CErc20Delegator_hUSDCApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value!.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCBorrow | null {
    return changetype<CErc20Delegator_hUSDCBorrow | null>(
      store.get("CErc20Delegator_hUSDCBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value!.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCFailure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCFailure entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCFailure must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCFailure", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCFailure | null {
    return changetype<CErc20Delegator_hUSDCFailure | null>(
      store.get("CErc20Delegator_hUSDCFailure", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get error(): BigInt {
    let value = this.get("error");
    return value!.toBigInt();
  }

  set error(value: BigInt) {
    this.set("error", Value.fromBigInt(value));
  }

  get info(): BigInt {
    let value = this.get("info");
    return value!.toBigInt();
  }

  set info(value: BigInt) {
    this.set("info", Value.fromBigInt(value));
  }

  get detail(): BigInt {
    let value = this.get("detail");
    return value!.toBigInt();
  }

  set detail(value: BigInt) {
    this.set("detail", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCLiquidateBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCLiquidateBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCLiquidateBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCLiquidateBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCLiquidateBorrow | null {
    return changetype<CErc20Delegator_hUSDCLiquidateBorrow | null>(
      store.get("CErc20Delegator_hUSDCLiquidateBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value!.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get cTokenCollateral(): Bytes {
    let value = this.get("cTokenCollateral");
    return value!.toBytes();
  }

  set cTokenCollateral(value: Bytes) {
    this.set("cTokenCollateral", Value.fromBytes(value));
  }

  get seizeTokens(): BigInt {
    let value = this.get("seizeTokens");
    return value!.toBigInt();
  }

  set seizeTokens(value: BigInt) {
    this.set("seizeTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCMint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCMint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCMint", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCMint | null {
    return changetype<CErc20Delegator_hUSDCMint | null>(
      store.get("CErc20Delegator_hUSDCMint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value!.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get mintTokens(): BigInt {
    let value = this.get("mintTokens");
    return value!.toBigInt();
  }

  set mintTokens(value: BigInt) {
    this.set("mintTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCNewAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCNewAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCNewAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCNewAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCNewAdmin | null {
    return changetype<CErc20Delegator_hUSDCNewAdmin | null>(
      store.get("CErc20Delegator_hUSDCNewAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value!.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value!.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDCNewComptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCNewComptroller entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCNewComptroller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCNewComptroller", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCNewComptroller | null {
    return changetype<CErc20Delegator_hUSDCNewComptroller | null>(
      store.get("CErc20Delegator_hUSDCNewComptroller", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldComptroller(): Bytes {
    let value = this.get("oldComptroller");
    return value!.toBytes();
  }

  set oldComptroller(value: Bytes) {
    this.set("oldComptroller", Value.fromBytes(value));
  }

  get newComptroller(): Bytes {
    let value = this.get("newComptroller");
    return value!.toBytes();
  }

  set newComptroller(value: Bytes) {
    this.set("newComptroller", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDCNewImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCNewImplementation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCNewImplementation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCNewImplementation", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCNewImplementation | null {
    return changetype<CErc20Delegator_hUSDCNewImplementation | null>(
      store.get("CErc20Delegator_hUSDCNewImplementation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldImplementation(): Bytes {
    let value = this.get("oldImplementation");
    return value!.toBytes();
  }

  set oldImplementation(value: Bytes) {
    this.set("oldImplementation", Value.fromBytes(value));
  }

  get newImplementation(): Bytes {
    let value = this.get("newImplementation");
    return value!.toBytes();
  }

  set newImplementation(value: Bytes) {
    this.set("newImplementation", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDCNewMarketInterestRateModel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCNewMarketInterestRateModel entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCNewMarketInterestRateModel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "CErc20Delegator_hUSDCNewMarketInterestRateModel",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): CErc20Delegator_hUSDCNewMarketInterestRateModel | null {
    return changetype<CErc20Delegator_hUSDCNewMarketInterestRateModel | null>(
      store.get("CErc20Delegator_hUSDCNewMarketInterestRateModel", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldInterestRateModel(): Bytes {
    let value = this.get("oldInterestRateModel");
    return value!.toBytes();
  }

  set oldInterestRateModel(value: Bytes) {
    this.set("oldInterestRateModel", Value.fromBytes(value));
  }

  get newInterestRateModel(): Bytes {
    let value = this.get("newInterestRateModel");
    return value!.toBytes();
  }

  set newInterestRateModel(value: Bytes) {
    this.set("newInterestRateModel", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDCNewPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCNewPendingAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCNewPendingAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCNewPendingAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCNewPendingAdmin | null {
    return changetype<CErc20Delegator_hUSDCNewPendingAdmin | null>(
      store.get("CErc20Delegator_hUSDCNewPendingAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingAdmin(): Bytes {
    let value = this.get("oldPendingAdmin");
    return value!.toBytes();
  }

  set oldPendingAdmin(value: Bytes) {
    this.set("oldPendingAdmin", Value.fromBytes(value));
  }

  get newPendingAdmin(): Bytes {
    let value = this.get("newPendingAdmin");
    return value!.toBytes();
  }

  set newPendingAdmin(value: Bytes) {
    this.set("newPendingAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDCNewReserveFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCNewReserveFactor entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCNewReserveFactor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCNewReserveFactor", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCNewReserveFactor | null {
    return changetype<CErc20Delegator_hUSDCNewReserveFactor | null>(
      store.get("CErc20Delegator_hUSDCNewReserveFactor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldReserveFactorMantissa(): BigInt {
    let value = this.get("oldReserveFactorMantissa");
    return value!.toBigInt();
  }

  set oldReserveFactorMantissa(value: BigInt) {
    this.set("oldReserveFactorMantissa", Value.fromBigInt(value));
  }

  get newReserveFactorMantissa(): BigInt {
    let value = this.get("newReserveFactorMantissa");
    return value!.toBigInt();
  }

  set newReserveFactorMantissa(value: BigInt) {
    this.set("newReserveFactorMantissa", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCRedeem entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCRedeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCRedeem", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCRedeem | null {
    return changetype<CErc20Delegator_hUSDCRedeem | null>(
      store.get("CErc20Delegator_hUSDCRedeem", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value!.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value!.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get redeemTokens(): BigInt {
    let value = this.get("redeemTokens");
    return value!.toBigInt();
  }

  set redeemTokens(value: BigInt) {
    this.set("redeemTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCRepayBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCRepayBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCRepayBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCRepayBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCRepayBorrow | null {
    return changetype<CErc20Delegator_hUSDCRepayBorrow | null>(
      store.get("CErc20Delegator_hUSDCRepayBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value!.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCReservesAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCReservesAdded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCReservesAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCReservesAdded", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCReservesAdded | null {
    return changetype<CErc20Delegator_hUSDCReservesAdded | null>(
      store.get("CErc20Delegator_hUSDCReservesAdded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefactor(): Bytes {
    let value = this.get("benefactor");
    return value!.toBytes();
  }

  set benefactor(value: Bytes) {
    this.set("benefactor", Value.fromBytes(value));
  }

  get addAmount(): BigInt {
    let value = this.get("addAmount");
    return value!.toBigInt();
  }

  set addAmount(value: BigInt) {
    this.set("addAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCReservesReduced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCReservesReduced entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCReservesReduced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCReservesReduced", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCReservesReduced | null {
    return changetype<CErc20Delegator_hUSDCReservesReduced | null>(
      store.get("CErc20Delegator_hUSDCReservesReduced", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get reduceAmount(): BigInt {
    let value = this.get("reduceAmount");
    return value!.toBigInt();
  }

  set reduceAmount(value: BigInt) {
    this.set("reduceAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDCTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDCTransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDCTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDCTransfer", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDCTransfer | null {
    return changetype<CErc20Delegator_hUSDCTransfer | null>(
      store.get("CErc20Delegator_hUSDCTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTAccrueInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTAccrueInterest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTAccrueInterest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTAccrueInterest", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTAccrueInterest | null {
    return changetype<CErc20Delegator_hUSDTAccrueInterest | null>(
      store.get("CErc20Delegator_hUSDTAccrueInterest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value!.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value!.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }

  get borrowIndex(): BigInt {
    let value = this.get("borrowIndex");
    return value!.toBigInt();
  }

  set borrowIndex(value: BigInt) {
    this.set("borrowIndex", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTApproval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTApproval", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTApproval | null {
    return changetype<CErc20Delegator_hUSDTApproval | null>(
      store.get("CErc20Delegator_hUSDTApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value!.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTBorrow | null {
    return changetype<CErc20Delegator_hUSDTBorrow | null>(
      store.get("CErc20Delegator_hUSDTBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value!.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTFailure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTFailure entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTFailure must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTFailure", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTFailure | null {
    return changetype<CErc20Delegator_hUSDTFailure | null>(
      store.get("CErc20Delegator_hUSDTFailure", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get error(): BigInt {
    let value = this.get("error");
    return value!.toBigInt();
  }

  set error(value: BigInt) {
    this.set("error", Value.fromBigInt(value));
  }

  get info(): BigInt {
    let value = this.get("info");
    return value!.toBigInt();
  }

  set info(value: BigInt) {
    this.set("info", Value.fromBigInt(value));
  }

  get detail(): BigInt {
    let value = this.get("detail");
    return value!.toBigInt();
  }

  set detail(value: BigInt) {
    this.set("detail", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTLiquidateBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTLiquidateBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTLiquidateBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTLiquidateBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTLiquidateBorrow | null {
    return changetype<CErc20Delegator_hUSDTLiquidateBorrow | null>(
      store.get("CErc20Delegator_hUSDTLiquidateBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value!.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get cTokenCollateral(): Bytes {
    let value = this.get("cTokenCollateral");
    return value!.toBytes();
  }

  set cTokenCollateral(value: Bytes) {
    this.set("cTokenCollateral", Value.fromBytes(value));
  }

  get seizeTokens(): BigInt {
    let value = this.get("seizeTokens");
    return value!.toBigInt();
  }

  set seizeTokens(value: BigInt) {
    this.set("seizeTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTMint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTMint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTMint", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTMint | null {
    return changetype<CErc20Delegator_hUSDTMint | null>(
      store.get("CErc20Delegator_hUSDTMint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value!.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get mintTokens(): BigInt {
    let value = this.get("mintTokens");
    return value!.toBigInt();
  }

  set mintTokens(value: BigInt) {
    this.set("mintTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTNewAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTNewAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTNewAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTNewAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTNewAdmin | null {
    return changetype<CErc20Delegator_hUSDTNewAdmin | null>(
      store.get("CErc20Delegator_hUSDTNewAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value!.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value!.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDTNewComptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTNewComptroller entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTNewComptroller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTNewComptroller", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTNewComptroller | null {
    return changetype<CErc20Delegator_hUSDTNewComptroller | null>(
      store.get("CErc20Delegator_hUSDTNewComptroller", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldComptroller(): Bytes {
    let value = this.get("oldComptroller");
    return value!.toBytes();
  }

  set oldComptroller(value: Bytes) {
    this.set("oldComptroller", Value.fromBytes(value));
  }

  get newComptroller(): Bytes {
    let value = this.get("newComptroller");
    return value!.toBytes();
  }

  set newComptroller(value: Bytes) {
    this.set("newComptroller", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDTNewImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTNewImplementation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTNewImplementation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTNewImplementation", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTNewImplementation | null {
    return changetype<CErc20Delegator_hUSDTNewImplementation | null>(
      store.get("CErc20Delegator_hUSDTNewImplementation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldImplementation(): Bytes {
    let value = this.get("oldImplementation");
    return value!.toBytes();
  }

  set oldImplementation(value: Bytes) {
    this.set("oldImplementation", Value.fromBytes(value));
  }

  get newImplementation(): Bytes {
    let value = this.get("newImplementation");
    return value!.toBytes();
  }

  set newImplementation(value: Bytes) {
    this.set("newImplementation", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDTNewMarketInterestRateModel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTNewMarketInterestRateModel entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTNewMarketInterestRateModel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "CErc20Delegator_hUSDTNewMarketInterestRateModel",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): CErc20Delegator_hUSDTNewMarketInterestRateModel | null {
    return changetype<CErc20Delegator_hUSDTNewMarketInterestRateModel | null>(
      store.get("CErc20Delegator_hUSDTNewMarketInterestRateModel", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldInterestRateModel(): Bytes {
    let value = this.get("oldInterestRateModel");
    return value!.toBytes();
  }

  set oldInterestRateModel(value: Bytes) {
    this.set("oldInterestRateModel", Value.fromBytes(value));
  }

  get newInterestRateModel(): Bytes {
    let value = this.get("newInterestRateModel");
    return value!.toBytes();
  }

  set newInterestRateModel(value: Bytes) {
    this.set("newInterestRateModel", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDTNewPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTNewPendingAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTNewPendingAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTNewPendingAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTNewPendingAdmin | null {
    return changetype<CErc20Delegator_hUSDTNewPendingAdmin | null>(
      store.get("CErc20Delegator_hUSDTNewPendingAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingAdmin(): Bytes {
    let value = this.get("oldPendingAdmin");
    return value!.toBytes();
  }

  set oldPendingAdmin(value: Bytes) {
    this.set("oldPendingAdmin", Value.fromBytes(value));
  }

  get newPendingAdmin(): Bytes {
    let value = this.get("newPendingAdmin");
    return value!.toBytes();
  }

  set newPendingAdmin(value: Bytes) {
    this.set("newPendingAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hUSDTNewReserveFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTNewReserveFactor entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTNewReserveFactor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTNewReserveFactor", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTNewReserveFactor | null {
    return changetype<CErc20Delegator_hUSDTNewReserveFactor | null>(
      store.get("CErc20Delegator_hUSDTNewReserveFactor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldReserveFactorMantissa(): BigInt {
    let value = this.get("oldReserveFactorMantissa");
    return value!.toBigInt();
  }

  set oldReserveFactorMantissa(value: BigInt) {
    this.set("oldReserveFactorMantissa", Value.fromBigInt(value));
  }

  get newReserveFactorMantissa(): BigInt {
    let value = this.get("newReserveFactorMantissa");
    return value!.toBigInt();
  }

  set newReserveFactorMantissa(value: BigInt) {
    this.set("newReserveFactorMantissa", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTRedeem entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTRedeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTRedeem", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTRedeem | null {
    return changetype<CErc20Delegator_hUSDTRedeem | null>(
      store.get("CErc20Delegator_hUSDTRedeem", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value!.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value!.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get redeemTokens(): BigInt {
    let value = this.get("redeemTokens");
    return value!.toBigInt();
  }

  set redeemTokens(value: BigInt) {
    this.set("redeemTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTRepayBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTRepayBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTRepayBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTRepayBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTRepayBorrow | null {
    return changetype<CErc20Delegator_hUSDTRepayBorrow | null>(
      store.get("CErc20Delegator_hUSDTRepayBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value!.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTReservesAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTReservesAdded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTReservesAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTReservesAdded", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTReservesAdded | null {
    return changetype<CErc20Delegator_hUSDTReservesAdded | null>(
      store.get("CErc20Delegator_hUSDTReservesAdded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefactor(): Bytes {
    let value = this.get("benefactor");
    return value!.toBytes();
  }

  set benefactor(value: Bytes) {
    this.set("benefactor", Value.fromBytes(value));
  }

  get addAmount(): BigInt {
    let value = this.get("addAmount");
    return value!.toBigInt();
  }

  set addAmount(value: BigInt) {
    this.set("addAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTReservesReduced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTReservesReduced entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTReservesReduced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTReservesReduced", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTReservesReduced | null {
    return changetype<CErc20Delegator_hUSDTReservesReduced | null>(
      store.get("CErc20Delegator_hUSDTReservesReduced", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get reduceAmount(): BigInt {
    let value = this.get("reduceAmount");
    return value!.toBigInt();
  }

  set reduceAmount(value: BigInt) {
    this.set("reduceAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hUSDTTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hUSDTTransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hUSDTTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hUSDTTransfer", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hUSDTTransfer | null {
    return changetype<CErc20Delegator_hUSDTTransfer | null>(
      store.get("CErc20Delegator_hUSDTTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXAccrueInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXAccrueInterest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXAccrueInterest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXAccrueInterest", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXAccrueInterest | null {
    return changetype<CErc20Delegator_hFRAXAccrueInterest | null>(
      store.get("CErc20Delegator_hFRAXAccrueInterest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value!.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value!.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }

  get borrowIndex(): BigInt {
    let value = this.get("borrowIndex");
    return value!.toBigInt();
  }

  set borrowIndex(value: BigInt) {
    this.set("borrowIndex", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXApproval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXApproval", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXApproval | null {
    return changetype<CErc20Delegator_hFRAXApproval | null>(
      store.get("CErc20Delegator_hFRAXApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value!.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXBorrow | null {
    return changetype<CErc20Delegator_hFRAXBorrow | null>(
      store.get("CErc20Delegator_hFRAXBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value!.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXFailure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXFailure entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXFailure must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXFailure", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXFailure | null {
    return changetype<CErc20Delegator_hFRAXFailure | null>(
      store.get("CErc20Delegator_hFRAXFailure", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get error(): BigInt {
    let value = this.get("error");
    return value!.toBigInt();
  }

  set error(value: BigInt) {
    this.set("error", Value.fromBigInt(value));
  }

  get info(): BigInt {
    let value = this.get("info");
    return value!.toBigInt();
  }

  set info(value: BigInt) {
    this.set("info", Value.fromBigInt(value));
  }

  get detail(): BigInt {
    let value = this.get("detail");
    return value!.toBigInt();
  }

  set detail(value: BigInt) {
    this.set("detail", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXLiquidateBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXLiquidateBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXLiquidateBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXLiquidateBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXLiquidateBorrow | null {
    return changetype<CErc20Delegator_hFRAXLiquidateBorrow | null>(
      store.get("CErc20Delegator_hFRAXLiquidateBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value!.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get cTokenCollateral(): Bytes {
    let value = this.get("cTokenCollateral");
    return value!.toBytes();
  }

  set cTokenCollateral(value: Bytes) {
    this.set("cTokenCollateral", Value.fromBytes(value));
  }

  get seizeTokens(): BigInt {
    let value = this.get("seizeTokens");
    return value!.toBigInt();
  }

  set seizeTokens(value: BigInt) {
    this.set("seizeTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXMint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXMint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXMint", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXMint | null {
    return changetype<CErc20Delegator_hFRAXMint | null>(
      store.get("CErc20Delegator_hFRAXMint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value!.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get mintTokens(): BigInt {
    let value = this.get("mintTokens");
    return value!.toBigInt();
  }

  set mintTokens(value: BigInt) {
    this.set("mintTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXNewAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXNewAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXNewAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXNewAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXNewAdmin | null {
    return changetype<CErc20Delegator_hFRAXNewAdmin | null>(
      store.get("CErc20Delegator_hFRAXNewAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value!.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value!.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hFRAXNewComptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXNewComptroller entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXNewComptroller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXNewComptroller", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXNewComptroller | null {
    return changetype<CErc20Delegator_hFRAXNewComptroller | null>(
      store.get("CErc20Delegator_hFRAXNewComptroller", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldComptroller(): Bytes {
    let value = this.get("oldComptroller");
    return value!.toBytes();
  }

  set oldComptroller(value: Bytes) {
    this.set("oldComptroller", Value.fromBytes(value));
  }

  get newComptroller(): Bytes {
    let value = this.get("newComptroller");
    return value!.toBytes();
  }

  set newComptroller(value: Bytes) {
    this.set("newComptroller", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hFRAXNewImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXNewImplementation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXNewImplementation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXNewImplementation", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXNewImplementation | null {
    return changetype<CErc20Delegator_hFRAXNewImplementation | null>(
      store.get("CErc20Delegator_hFRAXNewImplementation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldImplementation(): Bytes {
    let value = this.get("oldImplementation");
    return value!.toBytes();
  }

  set oldImplementation(value: Bytes) {
    this.set("oldImplementation", Value.fromBytes(value));
  }

  get newImplementation(): Bytes {
    let value = this.get("newImplementation");
    return value!.toBytes();
  }

  set newImplementation(value: Bytes) {
    this.set("newImplementation", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hFRAXNewMarketInterestRateModel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXNewMarketInterestRateModel entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXNewMarketInterestRateModel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "CErc20Delegator_hFRAXNewMarketInterestRateModel",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): CErc20Delegator_hFRAXNewMarketInterestRateModel | null {
    return changetype<CErc20Delegator_hFRAXNewMarketInterestRateModel | null>(
      store.get("CErc20Delegator_hFRAXNewMarketInterestRateModel", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldInterestRateModel(): Bytes {
    let value = this.get("oldInterestRateModel");
    return value!.toBytes();
  }

  set oldInterestRateModel(value: Bytes) {
    this.set("oldInterestRateModel", Value.fromBytes(value));
  }

  get newInterestRateModel(): Bytes {
    let value = this.get("newInterestRateModel");
    return value!.toBytes();
  }

  set newInterestRateModel(value: Bytes) {
    this.set("newInterestRateModel", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hFRAXNewPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXNewPendingAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXNewPendingAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXNewPendingAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXNewPendingAdmin | null {
    return changetype<CErc20Delegator_hFRAXNewPendingAdmin | null>(
      store.get("CErc20Delegator_hFRAXNewPendingAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingAdmin(): Bytes {
    let value = this.get("oldPendingAdmin");
    return value!.toBytes();
  }

  set oldPendingAdmin(value: Bytes) {
    this.set("oldPendingAdmin", Value.fromBytes(value));
  }

  get newPendingAdmin(): Bytes {
    let value = this.get("newPendingAdmin");
    return value!.toBytes();
  }

  set newPendingAdmin(value: Bytes) {
    this.set("newPendingAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hFRAXNewReserveFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXNewReserveFactor entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXNewReserveFactor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXNewReserveFactor", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXNewReserveFactor | null {
    return changetype<CErc20Delegator_hFRAXNewReserveFactor | null>(
      store.get("CErc20Delegator_hFRAXNewReserveFactor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldReserveFactorMantissa(): BigInt {
    let value = this.get("oldReserveFactorMantissa");
    return value!.toBigInt();
  }

  set oldReserveFactorMantissa(value: BigInt) {
    this.set("oldReserveFactorMantissa", Value.fromBigInt(value));
  }

  get newReserveFactorMantissa(): BigInt {
    let value = this.get("newReserveFactorMantissa");
    return value!.toBigInt();
  }

  set newReserveFactorMantissa(value: BigInt) {
    this.set("newReserveFactorMantissa", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXRedeem entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXRedeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXRedeem", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXRedeem | null {
    return changetype<CErc20Delegator_hFRAXRedeem | null>(
      store.get("CErc20Delegator_hFRAXRedeem", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value!.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value!.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get redeemTokens(): BigInt {
    let value = this.get("redeemTokens");
    return value!.toBigInt();
  }

  set redeemTokens(value: BigInt) {
    this.set("redeemTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXRepayBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXRepayBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXRepayBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXRepayBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXRepayBorrow | null {
    return changetype<CErc20Delegator_hFRAXRepayBorrow | null>(
      store.get("CErc20Delegator_hFRAXRepayBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value!.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXReservesAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXReservesAdded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXReservesAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXReservesAdded", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXReservesAdded | null {
    return changetype<CErc20Delegator_hFRAXReservesAdded | null>(
      store.get("CErc20Delegator_hFRAXReservesAdded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefactor(): Bytes {
    let value = this.get("benefactor");
    return value!.toBytes();
  }

  set benefactor(value: Bytes) {
    this.set("benefactor", Value.fromBytes(value));
  }

  get addAmount(): BigInt {
    let value = this.get("addAmount");
    return value!.toBigInt();
  }

  set addAmount(value: BigInt) {
    this.set("addAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXReservesReduced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXReservesReduced entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXReservesReduced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXReservesReduced", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXReservesReduced | null {
    return changetype<CErc20Delegator_hFRAXReservesReduced | null>(
      store.get("CErc20Delegator_hFRAXReservesReduced", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get reduceAmount(): BigInt {
    let value = this.get("reduceAmount");
    return value!.toBigInt();
  }

  set reduceAmount(value: BigInt) {
    this.set("reduceAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hFRAXTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hFRAXTransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hFRAXTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hFRAXTransfer", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hFRAXTransfer | null {
    return changetype<CErc20Delegator_hFRAXTransfer | null>(
      store.get("CErc20Delegator_hFRAXTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCAccrueInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCAccrueInterest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCAccrueInterest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCAccrueInterest", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCAccrueInterest | null {
    return changetype<CErc20Delegator_hWBTCAccrueInterest | null>(
      store.get("CErc20Delegator_hWBTCAccrueInterest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value!.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value!.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }

  get borrowIndex(): BigInt {
    let value = this.get("borrowIndex");
    return value!.toBigInt();
  }

  set borrowIndex(value: BigInt) {
    this.set("borrowIndex", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCApproval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCApproval", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCApproval | null {
    return changetype<CErc20Delegator_hWBTCApproval | null>(
      store.get("CErc20Delegator_hWBTCApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value!.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCBorrow | null {
    return changetype<CErc20Delegator_hWBTCBorrow | null>(
      store.get("CErc20Delegator_hWBTCBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value!.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCFailure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCFailure entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCFailure must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCFailure", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCFailure | null {
    return changetype<CErc20Delegator_hWBTCFailure | null>(
      store.get("CErc20Delegator_hWBTCFailure", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get error(): BigInt {
    let value = this.get("error");
    return value!.toBigInt();
  }

  set error(value: BigInt) {
    this.set("error", Value.fromBigInt(value));
  }

  get info(): BigInt {
    let value = this.get("info");
    return value!.toBigInt();
  }

  set info(value: BigInt) {
    this.set("info", Value.fromBigInt(value));
  }

  get detail(): BigInt {
    let value = this.get("detail");
    return value!.toBigInt();
  }

  set detail(value: BigInt) {
    this.set("detail", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCLiquidateBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCLiquidateBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCLiquidateBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCLiquidateBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCLiquidateBorrow | null {
    return changetype<CErc20Delegator_hWBTCLiquidateBorrow | null>(
      store.get("CErc20Delegator_hWBTCLiquidateBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value!.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get cTokenCollateral(): Bytes {
    let value = this.get("cTokenCollateral");
    return value!.toBytes();
  }

  set cTokenCollateral(value: Bytes) {
    this.set("cTokenCollateral", Value.fromBytes(value));
  }

  get seizeTokens(): BigInt {
    let value = this.get("seizeTokens");
    return value!.toBigInt();
  }

  set seizeTokens(value: BigInt) {
    this.set("seizeTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCMint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCMint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCMint", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCMint | null {
    return changetype<CErc20Delegator_hWBTCMint | null>(
      store.get("CErc20Delegator_hWBTCMint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value!.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get mintTokens(): BigInt {
    let value = this.get("mintTokens");
    return value!.toBigInt();
  }

  set mintTokens(value: BigInt) {
    this.set("mintTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCNewAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCNewAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCNewAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCNewAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCNewAdmin | null {
    return changetype<CErc20Delegator_hWBTCNewAdmin | null>(
      store.get("CErc20Delegator_hWBTCNewAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value!.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value!.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hWBTCNewComptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCNewComptroller entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCNewComptroller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCNewComptroller", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCNewComptroller | null {
    return changetype<CErc20Delegator_hWBTCNewComptroller | null>(
      store.get("CErc20Delegator_hWBTCNewComptroller", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldComptroller(): Bytes {
    let value = this.get("oldComptroller");
    return value!.toBytes();
  }

  set oldComptroller(value: Bytes) {
    this.set("oldComptroller", Value.fromBytes(value));
  }

  get newComptroller(): Bytes {
    let value = this.get("newComptroller");
    return value!.toBytes();
  }

  set newComptroller(value: Bytes) {
    this.set("newComptroller", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hWBTCNewImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCNewImplementation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCNewImplementation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCNewImplementation", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCNewImplementation | null {
    return changetype<CErc20Delegator_hWBTCNewImplementation | null>(
      store.get("CErc20Delegator_hWBTCNewImplementation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldImplementation(): Bytes {
    let value = this.get("oldImplementation");
    return value!.toBytes();
  }

  set oldImplementation(value: Bytes) {
    this.set("oldImplementation", Value.fromBytes(value));
  }

  get newImplementation(): Bytes {
    let value = this.get("newImplementation");
    return value!.toBytes();
  }

  set newImplementation(value: Bytes) {
    this.set("newImplementation", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hWBTCNewMarketInterestRateModel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCNewMarketInterestRateModel entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCNewMarketInterestRateModel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "CErc20Delegator_hWBTCNewMarketInterestRateModel",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): CErc20Delegator_hWBTCNewMarketInterestRateModel | null {
    return changetype<CErc20Delegator_hWBTCNewMarketInterestRateModel | null>(
      store.get("CErc20Delegator_hWBTCNewMarketInterestRateModel", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldInterestRateModel(): Bytes {
    let value = this.get("oldInterestRateModel");
    return value!.toBytes();
  }

  set oldInterestRateModel(value: Bytes) {
    this.set("oldInterestRateModel", Value.fromBytes(value));
  }

  get newInterestRateModel(): Bytes {
    let value = this.get("newInterestRateModel");
    return value!.toBytes();
  }

  set newInterestRateModel(value: Bytes) {
    this.set("newInterestRateModel", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hWBTCNewPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCNewPendingAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCNewPendingAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCNewPendingAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCNewPendingAdmin | null {
    return changetype<CErc20Delegator_hWBTCNewPendingAdmin | null>(
      store.get("CErc20Delegator_hWBTCNewPendingAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingAdmin(): Bytes {
    let value = this.get("oldPendingAdmin");
    return value!.toBytes();
  }

  set oldPendingAdmin(value: Bytes) {
    this.set("oldPendingAdmin", Value.fromBytes(value));
  }

  get newPendingAdmin(): Bytes {
    let value = this.get("newPendingAdmin");
    return value!.toBytes();
  }

  set newPendingAdmin(value: Bytes) {
    this.set("newPendingAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hWBTCNewReserveFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCNewReserveFactor entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCNewReserveFactor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCNewReserveFactor", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCNewReserveFactor | null {
    return changetype<CErc20Delegator_hWBTCNewReserveFactor | null>(
      store.get("CErc20Delegator_hWBTCNewReserveFactor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldReserveFactorMantissa(): BigInt {
    let value = this.get("oldReserveFactorMantissa");
    return value!.toBigInt();
  }

  set oldReserveFactorMantissa(value: BigInt) {
    this.set("oldReserveFactorMantissa", Value.fromBigInt(value));
  }

  get newReserveFactorMantissa(): BigInt {
    let value = this.get("newReserveFactorMantissa");
    return value!.toBigInt();
  }

  set newReserveFactorMantissa(value: BigInt) {
    this.set("newReserveFactorMantissa", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCRedeem entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCRedeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCRedeem", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCRedeem | null {
    return changetype<CErc20Delegator_hWBTCRedeem | null>(
      store.get("CErc20Delegator_hWBTCRedeem", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value!.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value!.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get redeemTokens(): BigInt {
    let value = this.get("redeemTokens");
    return value!.toBigInt();
  }

  set redeemTokens(value: BigInt) {
    this.set("redeemTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCRepayBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCRepayBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCRepayBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCRepayBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCRepayBorrow | null {
    return changetype<CErc20Delegator_hWBTCRepayBorrow | null>(
      store.get("CErc20Delegator_hWBTCRepayBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value!.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCReservesAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCReservesAdded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCReservesAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCReservesAdded", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCReservesAdded | null {
    return changetype<CErc20Delegator_hWBTCReservesAdded | null>(
      store.get("CErc20Delegator_hWBTCReservesAdded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefactor(): Bytes {
    let value = this.get("benefactor");
    return value!.toBytes();
  }

  set benefactor(value: Bytes) {
    this.set("benefactor", Value.fromBytes(value));
  }

  get addAmount(): BigInt {
    let value = this.get("addAmount");
    return value!.toBigInt();
  }

  set addAmount(value: BigInt) {
    this.set("addAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCReservesReduced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCReservesReduced entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCReservesReduced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCReservesReduced", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCReservesReduced | null {
    return changetype<CErc20Delegator_hWBTCReservesReduced | null>(
      store.get("CErc20Delegator_hWBTCReservesReduced", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get reduceAmount(): BigInt {
    let value = this.get("reduceAmount");
    return value!.toBigInt();
  }

  set reduceAmount(value: BigInt) {
    this.set("reduceAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hWBTCTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hWBTCTransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hWBTCTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hWBTCTransfer", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hWBTCTransfer | null {
    return changetype<CErc20Delegator_hWBTCTransfer | null>(
      store.get("CErc20Delegator_hWBTCTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CEther_hMATICAccrueInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICAccrueInterest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICAccrueInterest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICAccrueInterest", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICAccrueInterest | null {
    return changetype<CEther_hMATICAccrueInterest | null>(
      store.get("CEther_hMATICAccrueInterest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value!.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value!.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }

  get borrowIndex(): BigInt {
    let value = this.get("borrowIndex");
    return value!.toBigInt();
  }

  set borrowIndex(value: BigInt) {
    this.set("borrowIndex", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CEther_hMATICApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICApproval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICApproval", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICApproval | null {
    return changetype<CEther_hMATICApproval | null>(
      store.get("CEther_hMATICApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value!.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CEther_hMATICBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CEther_hMATICBorrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICBorrow", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICBorrow | null {
    return changetype<CEther_hMATICBorrow | null>(
      store.get("CEther_hMATICBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value!.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CEther_hMATICFailure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CEther_hMATICFailure entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICFailure must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICFailure", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICFailure | null {
    return changetype<CEther_hMATICFailure | null>(
      store.get("CEther_hMATICFailure", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get error(): BigInt {
    let value = this.get("error");
    return value!.toBigInt();
  }

  set error(value: BigInt) {
    this.set("error", Value.fromBigInt(value));
  }

  get info(): BigInt {
    let value = this.get("info");
    return value!.toBigInt();
  }

  set info(value: BigInt) {
    this.set("info", Value.fromBigInt(value));
  }

  get detail(): BigInt {
    let value = this.get("detail");
    return value!.toBigInt();
  }

  set detail(value: BigInt) {
    this.set("detail", Value.fromBigInt(value));
  }
}

export class CEther_hMATICLiquidateBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICLiquidateBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICLiquidateBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICLiquidateBorrow", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICLiquidateBorrow | null {
    return changetype<CEther_hMATICLiquidateBorrow | null>(
      store.get("CEther_hMATICLiquidateBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value!.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get cTokenCollateral(): Bytes {
    let value = this.get("cTokenCollateral");
    return value!.toBytes();
  }

  set cTokenCollateral(value: Bytes) {
    this.set("cTokenCollateral", Value.fromBytes(value));
  }

  get seizeTokens(): BigInt {
    let value = this.get("seizeTokens");
    return value!.toBigInt();
  }

  set seizeTokens(value: BigInt) {
    this.set("seizeTokens", Value.fromBigInt(value));
  }
}

export class CEther_hMATICMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CEther_hMATICMint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICMint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICMint", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICMint | null {
    return changetype<CEther_hMATICMint | null>(
      store.get("CEther_hMATICMint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value!.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get mintTokens(): BigInt {
    let value = this.get("mintTokens");
    return value!.toBigInt();
  }

  set mintTokens(value: BigInt) {
    this.set("mintTokens", Value.fromBigInt(value));
  }
}

export class CEther_hMATICNewAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICNewAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICNewAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICNewAdmin", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICNewAdmin | null {
    return changetype<CEther_hMATICNewAdmin | null>(
      store.get("CEther_hMATICNewAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value!.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value!.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class CEther_hMATICNewComptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICNewComptroller entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICNewComptroller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICNewComptroller", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICNewComptroller | null {
    return changetype<CEther_hMATICNewComptroller | null>(
      store.get("CEther_hMATICNewComptroller", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldComptroller(): Bytes {
    let value = this.get("oldComptroller");
    return value!.toBytes();
  }

  set oldComptroller(value: Bytes) {
    this.set("oldComptroller", Value.fromBytes(value));
  }

  get newComptroller(): Bytes {
    let value = this.get("newComptroller");
    return value!.toBytes();
  }

  set newComptroller(value: Bytes) {
    this.set("newComptroller", Value.fromBytes(value));
  }
}

export class CEther_hMATICNewMarketInterestRateModel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICNewMarketInterestRateModel entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICNewMarketInterestRateModel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICNewMarketInterestRateModel", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICNewMarketInterestRateModel | null {
    return changetype<CEther_hMATICNewMarketInterestRateModel | null>(
      store.get("CEther_hMATICNewMarketInterestRateModel", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldInterestRateModel(): Bytes {
    let value = this.get("oldInterestRateModel");
    return value!.toBytes();
  }

  set oldInterestRateModel(value: Bytes) {
    this.set("oldInterestRateModel", Value.fromBytes(value));
  }

  get newInterestRateModel(): Bytes {
    let value = this.get("newInterestRateModel");
    return value!.toBytes();
  }

  set newInterestRateModel(value: Bytes) {
    this.set("newInterestRateModel", Value.fromBytes(value));
  }
}

export class CEther_hMATICNewPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICNewPendingAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICNewPendingAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICNewPendingAdmin", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICNewPendingAdmin | null {
    return changetype<CEther_hMATICNewPendingAdmin | null>(
      store.get("CEther_hMATICNewPendingAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingAdmin(): Bytes {
    let value = this.get("oldPendingAdmin");
    return value!.toBytes();
  }

  set oldPendingAdmin(value: Bytes) {
    this.set("oldPendingAdmin", Value.fromBytes(value));
  }

  get newPendingAdmin(): Bytes {
    let value = this.get("newPendingAdmin");
    return value!.toBytes();
  }

  set newPendingAdmin(value: Bytes) {
    this.set("newPendingAdmin", Value.fromBytes(value));
  }
}

export class CEther_hMATICNewReserveFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICNewReserveFactor entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICNewReserveFactor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICNewReserveFactor", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICNewReserveFactor | null {
    return changetype<CEther_hMATICNewReserveFactor | null>(
      store.get("CEther_hMATICNewReserveFactor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldReserveFactorMantissa(): BigInt {
    let value = this.get("oldReserveFactorMantissa");
    return value!.toBigInt();
  }

  set oldReserveFactorMantissa(value: BigInt) {
    this.set("oldReserveFactorMantissa", Value.fromBigInt(value));
  }

  get newReserveFactorMantissa(): BigInt {
    let value = this.get("newReserveFactorMantissa");
    return value!.toBigInt();
  }

  set newReserveFactorMantissa(value: BigInt) {
    this.set("newReserveFactorMantissa", Value.fromBigInt(value));
  }
}

export class CEther_hMATICRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CEther_hMATICRedeem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICRedeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICRedeem", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICRedeem | null {
    return changetype<CEther_hMATICRedeem | null>(
      store.get("CEther_hMATICRedeem", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value!.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value!.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get redeemTokens(): BigInt {
    let value = this.get("redeemTokens");
    return value!.toBigInt();
  }

  set redeemTokens(value: BigInt) {
    this.set("redeemTokens", Value.fromBigInt(value));
  }
}

export class CEther_hMATICRepayBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICRepayBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICRepayBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICRepayBorrow", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICRepayBorrow | null {
    return changetype<CEther_hMATICRepayBorrow | null>(
      store.get("CEther_hMATICRepayBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value!.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CEther_hMATICReservesAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICReservesAdded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICReservesAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICReservesAdded", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICReservesAdded | null {
    return changetype<CEther_hMATICReservesAdded | null>(
      store.get("CEther_hMATICReservesAdded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefactor(): Bytes {
    let value = this.get("benefactor");
    return value!.toBytes();
  }

  set benefactor(value: Bytes) {
    this.set("benefactor", Value.fromBytes(value));
  }

  get addAmount(): BigInt {
    let value = this.get("addAmount");
    return value!.toBigInt();
  }

  set addAmount(value: BigInt) {
    this.set("addAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CEther_hMATICReservesReduced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICReservesReduced entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICReservesReduced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICReservesReduced", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICReservesReduced | null {
    return changetype<CEther_hMATICReservesReduced | null>(
      store.get("CEther_hMATICReservesReduced", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get reduceAmount(): BigInt {
    let value = this.get("reduceAmount");
    return value!.toBigInt();
  }

  set reduceAmount(value: BigInt) {
    this.set("reduceAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CEther_hMATICTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CEther_hMATICTransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CEther_hMATICTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CEther_hMATICTransfer", id.toString(), this);
    }
  }

  static load(id: string): CEther_hMATICTransfer | null {
    return changetype<CEther_hMATICTransfer | null>(
      store.get("CEther_hMATICTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKAccrueInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKAccrueInterest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKAccrueInterest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKAccrueInterest", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKAccrueInterest | null {
    return changetype<CErc20Delegator_hLINKAccrueInterest | null>(
      store.get("CErc20Delegator_hLINKAccrueInterest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value!.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value!.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }

  get borrowIndex(): BigInt {
    let value = this.get("borrowIndex");
    return value!.toBigInt();
  }

  set borrowIndex(value: BigInt) {
    this.set("borrowIndex", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKApproval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKApproval", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKApproval | null {
    return changetype<CErc20Delegator_hLINKApproval | null>(
      store.get("CErc20Delegator_hLINKApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value!.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKBorrow | null {
    return changetype<CErc20Delegator_hLINKBorrow | null>(
      store.get("CErc20Delegator_hLINKBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value!.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKFailure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKFailure entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKFailure must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKFailure", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKFailure | null {
    return changetype<CErc20Delegator_hLINKFailure | null>(
      store.get("CErc20Delegator_hLINKFailure", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get error(): BigInt {
    let value = this.get("error");
    return value!.toBigInt();
  }

  set error(value: BigInt) {
    this.set("error", Value.fromBigInt(value));
  }

  get info(): BigInt {
    let value = this.get("info");
    return value!.toBigInt();
  }

  set info(value: BigInt) {
    this.set("info", Value.fromBigInt(value));
  }

  get detail(): BigInt {
    let value = this.get("detail");
    return value!.toBigInt();
  }

  set detail(value: BigInt) {
    this.set("detail", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKLiquidateBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKLiquidateBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKLiquidateBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKLiquidateBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKLiquidateBorrow | null {
    return changetype<CErc20Delegator_hLINKLiquidateBorrow | null>(
      store.get("CErc20Delegator_hLINKLiquidateBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value!.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get cTokenCollateral(): Bytes {
    let value = this.get("cTokenCollateral");
    return value!.toBytes();
  }

  set cTokenCollateral(value: Bytes) {
    this.set("cTokenCollateral", Value.fromBytes(value));
  }

  get seizeTokens(): BigInt {
    let value = this.get("seizeTokens");
    return value!.toBigInt();
  }

  set seizeTokens(value: BigInt) {
    this.set("seizeTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKMint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKMint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKMint", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKMint | null {
    return changetype<CErc20Delegator_hLINKMint | null>(
      store.get("CErc20Delegator_hLINKMint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value!.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get mintTokens(): BigInt {
    let value = this.get("mintTokens");
    return value!.toBigInt();
  }

  set mintTokens(value: BigInt) {
    this.set("mintTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKNewAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKNewAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKNewAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKNewAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKNewAdmin | null {
    return changetype<CErc20Delegator_hLINKNewAdmin | null>(
      store.get("CErc20Delegator_hLINKNewAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value!.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value!.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hLINKNewComptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKNewComptroller entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKNewComptroller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKNewComptroller", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKNewComptroller | null {
    return changetype<CErc20Delegator_hLINKNewComptroller | null>(
      store.get("CErc20Delegator_hLINKNewComptroller", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldComptroller(): Bytes {
    let value = this.get("oldComptroller");
    return value!.toBytes();
  }

  set oldComptroller(value: Bytes) {
    this.set("oldComptroller", Value.fromBytes(value));
  }

  get newComptroller(): Bytes {
    let value = this.get("newComptroller");
    return value!.toBytes();
  }

  set newComptroller(value: Bytes) {
    this.set("newComptroller", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hLINKNewImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKNewImplementation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKNewImplementation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKNewImplementation", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKNewImplementation | null {
    return changetype<CErc20Delegator_hLINKNewImplementation | null>(
      store.get("CErc20Delegator_hLINKNewImplementation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldImplementation(): Bytes {
    let value = this.get("oldImplementation");
    return value!.toBytes();
  }

  set oldImplementation(value: Bytes) {
    this.set("oldImplementation", Value.fromBytes(value));
  }

  get newImplementation(): Bytes {
    let value = this.get("newImplementation");
    return value!.toBytes();
  }

  set newImplementation(value: Bytes) {
    this.set("newImplementation", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hLINKNewMarketInterestRateModel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKNewMarketInterestRateModel entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKNewMarketInterestRateModel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "CErc20Delegator_hLINKNewMarketInterestRateModel",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): CErc20Delegator_hLINKNewMarketInterestRateModel | null {
    return changetype<CErc20Delegator_hLINKNewMarketInterestRateModel | null>(
      store.get("CErc20Delegator_hLINKNewMarketInterestRateModel", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldInterestRateModel(): Bytes {
    let value = this.get("oldInterestRateModel");
    return value!.toBytes();
  }

  set oldInterestRateModel(value: Bytes) {
    this.set("oldInterestRateModel", Value.fromBytes(value));
  }

  get newInterestRateModel(): Bytes {
    let value = this.get("newInterestRateModel");
    return value!.toBytes();
  }

  set newInterestRateModel(value: Bytes) {
    this.set("newInterestRateModel", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hLINKNewPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKNewPendingAdmin entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKNewPendingAdmin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKNewPendingAdmin", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKNewPendingAdmin | null {
    return changetype<CErc20Delegator_hLINKNewPendingAdmin | null>(
      store.get("CErc20Delegator_hLINKNewPendingAdmin", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingAdmin(): Bytes {
    let value = this.get("oldPendingAdmin");
    return value!.toBytes();
  }

  set oldPendingAdmin(value: Bytes) {
    this.set("oldPendingAdmin", Value.fromBytes(value));
  }

  get newPendingAdmin(): Bytes {
    let value = this.get("newPendingAdmin");
    return value!.toBytes();
  }

  set newPendingAdmin(value: Bytes) {
    this.set("newPendingAdmin", Value.fromBytes(value));
  }
}

export class CErc20Delegator_hLINKNewReserveFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKNewReserveFactor entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKNewReserveFactor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKNewReserveFactor", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKNewReserveFactor | null {
    return changetype<CErc20Delegator_hLINKNewReserveFactor | null>(
      store.get("CErc20Delegator_hLINKNewReserveFactor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldReserveFactorMantissa(): BigInt {
    let value = this.get("oldReserveFactorMantissa");
    return value!.toBigInt();
  }

  set oldReserveFactorMantissa(value: BigInt) {
    this.set("oldReserveFactorMantissa", Value.fromBigInt(value));
  }

  get newReserveFactorMantissa(): BigInt {
    let value = this.get("newReserveFactorMantissa");
    return value!.toBigInt();
  }

  set newReserveFactorMantissa(value: BigInt) {
    this.set("newReserveFactorMantissa", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKRedeem entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKRedeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKRedeem", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKRedeem | null {
    return changetype<CErc20Delegator_hLINKRedeem | null>(
      store.get("CErc20Delegator_hLINKRedeem", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value!.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value!.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get redeemTokens(): BigInt {
    let value = this.get("redeemTokens");
    return value!.toBigInt();
  }

  set redeemTokens(value: BigInt) {
    this.set("redeemTokens", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKRepayBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKRepayBorrow entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKRepayBorrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKRepayBorrow", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKRepayBorrow | null {
    return changetype<CErc20Delegator_hLINKRepayBorrow | null>(
      store.get("CErc20Delegator_hLINKRepayBorrow", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value!.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value!.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value!.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value!.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKReservesAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKReservesAdded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKReservesAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKReservesAdded", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKReservesAdded | null {
    return changetype<CErc20Delegator_hLINKReservesAdded | null>(
      store.get("CErc20Delegator_hLINKReservesAdded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefactor(): Bytes {
    let value = this.get("benefactor");
    return value!.toBytes();
  }

  set benefactor(value: Bytes) {
    this.set("benefactor", Value.fromBytes(value));
  }

  get addAmount(): BigInt {
    let value = this.get("addAmount");
    return value!.toBigInt();
  }

  set addAmount(value: BigInt) {
    this.set("addAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKReservesReduced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKReservesReduced entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKReservesReduced must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKReservesReduced", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKReservesReduced | null {
    return changetype<CErc20Delegator_hLINKReservesReduced | null>(
      store.get("CErc20Delegator_hLINKReservesReduced", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get reduceAmount(): BigInt {
    let value = this.get("reduceAmount");
    return value!.toBigInt();
  }

  set reduceAmount(value: BigInt) {
    this.set("reduceAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value!.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class CErc20Delegator_hLINKTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CErc20Delegator_hLINKTransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CErc20Delegator_hLINKTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CErc20Delegator_hLINKTransfer", id.toString(), this);
    }
  }

  static load(id: string): CErc20Delegator_hLINKTransfer | null {
    return changetype<CErc20Delegator_hLINKTransfer | null>(
      store.get("CErc20Delegator_hLINKTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
